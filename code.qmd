---
title: "The Influence of Russia/Ukraine Conflict on US Economy"
subtitle: "INFO 526 - Fall 2024 - Project - Stock Sleuths"
author: 
  - name: "Stock Sleuths"
    affiliations:
      - name: "School of Information, University of Arizona"
description: "Project description"
format:
   html:
    code-tools: true
    code-overflow: wrap
    embed-resources: true
  editor: visual
  execute:
    warning: false
    echo: false
---

## Introduction

This analysis examines how the Russia-Ukraine conflict has impacted the U.S. economy by exploring key economic indicators, including the S&P 500 index, inflation rates, and consumer sentiment. We will clean, merge, and visualize these datasets to uncover trends and correlations.

## Data Sources

The datasets include:

1\. **S&P 500 Index Data**: Daily historical values for the S&P 500, a major U.S. stock market index, from 2014 to present.

2\. **Inflation Rate Data**: Monthly U.S. inflation rates, which reflect economic inflation trends since 1978.

3\. **Consumer Sentiment Data**: Monthly consumer sentiment data reflecting consumer confidence in the economy, from 1952 to present.

# Setup

```{r}
if (!require("pacman")) 
  install.packages("pacman")

# to load packages or install the packages
pacman::p_load(tidyverse,
               here,
               ggforce,
               knitr,
               dplyr,
               tidyr,
               fs,
               DT,
               skimr,
               janitor,
               readxl)

knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```

# Data Cleaning

## Data set 1: S&P 500 Index Data

The S&P 500 data set contains daily historical values for the S&P 500, a key stock market index that tracks the performance of 500 large U.S. companies.

### Load and Preview Raw Data

```{r}
# Load the S&P 500 data
sp500_data <- read_csv(here("data", "sp500_index.csv"))
glimpse(sp500_data)  # Preview raw data structure
datatable(sp500_data)
```

### Cleaning and Transforming Data

```{r}
# Clean and transform S&P 500 data
sp500_data <- sp500_data |>
  rename(date = Date, sp500_index = `S&P500`) |>
  mutate(date = as.Date(date, format = "%m-%d-%Y")) |>
  clean_names()

# Preview cleaned data
glimpse(sp500_data)
summary(sp500_data)
datatable(sp500_data)

```

**Insight:** After cleaning, we have a dataset with `date` and `sp500_index` columns, making it easy to track stock market performance over time. The date formatting and column renaming help standardize the dataset for further analysis.

## Data set 2: Inflation Rate Data

The inflation data set contains monthly U.S. inflation rates, which are essential for understanding changes in purchasing power and the cost of living.

### Load and Preview Raw Data

```{r}
# Load Inflation data
inflation_data <- read_csv(here("data", "MICH.csv"))
glimpse(inflation_data)  # Preview raw data structure
datatable(inflation_data)
```

### Cleaning and Transforming Data

```{r}
# Clean and transform inflation data
inflation_data <- inflation_data |>
  rename(date = DATE, inflation_rate = MICH) |>
  mutate(date = as.Date(date, format = "%m-%d-%Y")) |>
  clean_names()

# Preview cleaned data
glimpse(inflation_data)
datatable(inflation_data)
```

**Insight:** The cleaned inflation data provides a monthly view of inflation rates in the U.S., which we can later correlate with other indicators to see how inflation has responded to global events like the Russia-Ukraine conflict.

## Dataset 3: Consumer Sentiment Data

The consumer sentiment data set captures the confidence levels of U.S. consumers, reflecting their optimism or pessimism about economic conditions.

### Load and Preview Raw Data

```{r}
# Load Consumer Sentiment data
sentiment_data <- read_csv(here("data", "UMCSENT.csv"))
glimpse(sentiment_data)  # Preview raw data structure
datatable(sentiment_data)
```

### Cleaning and Transforming Data

```{r}
# Clean and transform consumer sentiment data
sentiment_data <- sentiment_data |>
  rename(date = DATE, consumer_sentiment = UMCSENT) |>
  mutate(date = as.Date(date, format = "%m-%d-%Y"),
         consumer_sentiment = na_if(consumer_sentiment, ".")) |>
  mutate(consumer_sentiment = as.numeric(consumer_sentiment)) |>
  clean_names()

# Preview cleaned data
glimpse(sentiment_data)
datatable(sentiment_data)
```

**Insight:** The consumer sentiment data now includes a clean, numeric `consumer_sentiment` column, allowing us to track consumer confidence over time. This indicator often correlates with spending and investment behavior, making it a valuable measure for economic analysis.

## Data set 4: Oil Price Data

Oil price data is a critical indicator of economic dynamics, especially during geopolitical conflicts. This section loads, cleans, and analyzes oil data from multiple sheets in the Excel file.

### Load and Inspect Oil Price Data

```{r}
# Define file path for the oil price data set
file_path <- here("data", "pswrgvwall.xls")

# List all sheet names
sheet_names <- excel_sheets(file_path)

# Exclude "Contents" sheet and merge the remaining data sheets
oil_data <- map_dfr(sheet_names[!sheet_names %in% "Contents"], 
                    ~ read_excel(file_path, sheet = .x, skip = 2))

# Inspect the structure of the merged data
names(oil_data)
```

### Cleaning and Transforming Data

```{r}
# Rename relevant columns and clean the data
oil_data <- map_dfr(sheet_names[!sheet_names %in% "Contents"], 
                    ~ read_excel(file_path, sheet = .x, skip = 2))

# Select relevant columns
oil_data <- oil_data |>
  select(
    date = `Date`, 
    oil_price = `Weekly U.S. Regular Conventional Retail Gasoline Prices  (Dollars per Gallon)`
  )

# Rename columns for simplicity
oil_data <- oil_data |>
  clean_names() |>
  mutate(
    date = as.Date(date, format = "%Y-%m-%d"),
    oil_price = as.numeric(oil_price)
  ) |>
  filter(!is.na(oil_price))  # Remove rows with missing oil prices

# Preview the cleaned oil data
# glimpse(oil_data)
datatable(oil_data)

# Save cleaned oil data
write_csv(oil_data, here("data", "cleaned_oil_data.csv"))
```

## Identifying Missing Values Across Data sets

To ensure data quality, we summarize missing values across all data cd sets. This helps identify any gaps before merging and analyzing the data.

```{r}
# Missing values summary for each dataset
missing_summary <- list(
  S_P500 = sp500_data |> 
    summarize(across(everything(),
                     ~ sum(is.na(.))
                     )
              ),
  Inflation = inflation_data |> 
    summarize(across(everything(), 
                     ~ sum(is.na(.))
                     )
              ),
  Consumer_Sentiment = sentiment_data |> 
    summarize(across(everything(),
                     ~ sum(is.na(.))
                     )
              )
  ) |> 
  bind_rows(.id = "dataset")

missing_summary
datatable(missing_summary)
```

**Insight:** By summarizing missing values, we can see if there are any gaps in the data. If significant gaps exist, we may need to address these before merging data sets to ensure our analysis remains accurate and representative.

## Merging the Data sets

Now that each data set is cleaned, we merge them by the `date` column to create a comprehensive data set for analysis.

```{r}
## Merging the Datasets
merged_data <- sentiment_data |>
  left_join(inflation_data, by = "date") |>
  left_join(sp500_data, by = "date")

# Display the column names and structure of the merged dataset
glimpse(merged_data)

datatable(merged_data)

# Display a complete summary of the merged dataset
summary(merged_data)

# Use skimr for an enhanced summary
skim(merged_data)

```

**Insight:** The merged data set combines the S&P 500 index, inflation rates, and consumer sentiment data, all aligned by date. This allows us to analyze the interplay between stock market trends, inflation, and consumer sentiment over time, providing a holistic view of economic dynamics.

### Saving the Merged Data

Save the merged data set as a CSV file in the `data` folder for future analysis.

```{r}
# Save the merged dataset to the `data` folder
write_csv(merged_data, here("data", "merged_economic_indicators.csv"))
```

## Exploratory Data Visualization

We visualize each indicator over time to observe trends and identify any interesting patterns or potential correlations.

### S&P 500 Index Over Time

```{r}
sp500_plot <- ggplot(sp500_data, 
                     aes(x = date, 
                         y = sp500_index)) +
  geom_line(color = "#1f77b4", size = 1) +
  labs(
    title = "S&P 500 Index Over Time",
    subtitle = "Daily performance of the S&P 500 index from 2014 to present",
    x = "Date",
    y = "S&P 500 Index Value"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12, face = "italic"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
  geom_smooth(
    method = "loess",
    se = FALSE,
    color = "#ff7f0e",
    size = 0.8
  )
sp500_plot
```

### Consumer Sentiment Over Time

```{r}
sentiment_plot <- ggplot(sentiment_data, 
                         aes(x = date, 
                             y = consumer_sentiment)) +
  geom_line(color = "#2ca02c", size = 1) +
  labs(
    title = "Consumer Sentiment Over Time",
    subtitle = "Monthly consumer sentiment index from 1952 to present",
    x = "Date",
    y = "Consumer Sentiment Index"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12, face = "italic"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  scale_x_date(date_breaks = "5 years", date_labels = "%Y") +
  geom_smooth(
    method = "loess",
    se = FALSE,
    color = "#d62728",
    size = 0.8
  )
sentiment_plot

```

### Inflation Rate Over Time

```{r}
inflation_plot <- ggplot(inflation_data,
                         aes(x = date, 
                             y = inflation_rate)) +
  geom_line(color = "#D32F2F", size = 1) +  # Deep red for boldness and visibility
  labs(
    title = "Inflation Rate Over Time",
    subtitle = "Monthly U.S. inflation rate from 1978 to present",
    x = "Date",
    y = "Inflation Rate (%)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12, face = "italic"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  scale_x_date(date_breaks = "5 years", date_labels = "%Y") +
  geom_smooth(
    method = "loess",
    se = FALSE,
    color = "black",
    size = 0.8
  )  # Golden yellow for a complementary contrast
inflation_plot


```

### **Visualization of Oil Prices**

```{r}
# Plot oil prices over time
ggplot(oil_data, aes(x = date, y = oil_price)) +
  geom_line(color = "#FF5733", size = 1) +
  labs(
    title = "U.S. Regular Gasoline Prices Over Time",
    subtitle = "Weekly U.S. Regular Conventional Retail Gasoline Prices",
    x = "Date",
    y = "Price (USD per Gallon)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12, face = "italic"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
  geom_smooth(method = "loess", se = FALSE, color = "#1F78B4", size = 0.8)
```

### Descriptive analysis for oil prices

```{r}
# Calculate basic statistics for oil prices
oil_stats <- oil_data |>
  summarize(
    mean_price = mean(oil_price, na.rm = TRUE),
    median_price = median(oil_price, na.rm = TRUE),
    sd_price = sd(oil_price, na.rm = TRUE),
    min_price = min(oil_price, na.rm = TRUE),
    max_price = max(oil_price, na.rm = TRUE)
  )

datatable(oil_stats)
```

**Insight:**

1.  **S&P 500 Trends**: The S&P 500 line plot shows fluctuations in stock market performance, highlighting periods of market volatility or growth.

2.  **Consumer Sentiment Trends**: The consumer sentiment plot reflects changes in consumer confidence, with potential dips during economic downturns.

3.  **Inflation Rate Trends**: The inflation plot shows trends in inflation rates, which may spike during periods of economic stress.

```{r}
view(oil)
sp500_index <- read_csv("data/sp500_index.csv")

# For S&P 500 Data
sp500_index$Date <- as.Date(sp500_index$Date, format = "%Y-%m-%d")

# For Oil Data
oil <- read_csv("data/cleaned_oil_data.csv")
oil$date <- as.Date(oil$date, format = "%Y-%m-%d")

sum(is.na(sp500_index$`S&P500`))
sum(is.na(oil$oil_price))

start_date <- as.Date("2022-01-03") 
end_date <- as.Date("2023-01-02")

sp500_filtered <- sp500_index %>%
  filter(Date >= start_date & Date <= end_date)

oil_filtered <- oil %>%
  filter(Date >= start_date & Date <= end_date)
view(oil_filtered)
sp500_filtered <- na.omit(sp500_filtered)
oil_filtered <- na.omit(oil_filtered)

# Plot for S&P 500
ggplot(sp500_filtered, aes(x = Date, y = `S&P500`)) +
  geom_line(color = "blue") +
  labs(title = "S&P 500 Trends Over Time", x = "Date", y = "Index Value")

# Plot for Oil Prices
ggplot(oil_filtered, aes(x = Date, y = OilPriceColumn)) +
  geom_line(color = "red") +
  labs(title = "Oil Prices Trends Over Time", x = "Date", y = "Price")

```
