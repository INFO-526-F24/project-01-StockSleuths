---
title: "Visuals"
author: "Neha Chaudhari"
editor: visual
---

## libraries

```{r}
#| label: Loading all libraries

if (!require("pacman")) 
  install.packages("pacman")

# use this line for installing/loading
pacman::p_load(readr,
               dplyr,
               readxl,
               ggplot2,
               plotly,
               scales,
               ggthemes,
               gganimate)


```

## Merging all datasets together

```{r}
#| label: Cleaning and merging the data together

#Stock market
sp500_data <- read_csv('data/sp500_index.csv') 
sp500_data$Date <- as.Date(sp500_data$Date, format = "%Y-%m-%d")
sp500_data <- sp500_data |>
  rename(DATE = Date)
glimpse(sp500_data)


#Oil prices
# oil_data <- read_excel("data/pswrgvwall.xls", sheet = "Data 1", skip = 2)
# oil_data <- oil_data |>
#   select(1:2)
# oil_data <- oil_data |>
#   mutate(DATE = as.Date(Date)) |>  # Converting 'Date' (dttm) to 'Date' type
#   select(-Date) |> # Removing the old 'Date' column
#   rename("Oil prices" = "Weekly U.S. Regular Conventional Retail Gasoline Prices  (Dollars per Gallon)")

oil_data <- read_csv('data/cleaned_oil_data.csv')
oil_data <- oil_data |>
  rename(DATE = date) 
#str(oil_data)
glimpse(oil_data) 

# consumer sentiment
sent_data <- read_csv('data/UMCSENT.csv')  
sent_data$DATE <- as.Date(sent_data$DATE, format = "%Y-%m-%d")

# inflaltion
inflation_data <- read_csv('data/MICH.csv') 
inflation_data$DATE <- as.Date(inflation_data$DATE, format = "%Y-%m-%d")

# merged_data <- left_join(sent_data, inflation_data, by = 'DATE')
# glimpse(merged_data)

merged_data <- sp500_data |>
  left_join(inflation_data, by = 'DATE') |>
  left_join(oil_data, by = 'DATE') |>
  left_join(sent_data, by = 'DATE')
glimpse(merged_data)

merged_data <- merged_data |>
  mutate(UMCSENT = na_if(UMCSENT, "."))
merged_data <- merged_data |>
  filter(!is.na(UMCSENT) | !is.na(oil_price) | !is.na(`S&P500`))
glimpse(merged_data)

data <- read_csv("data/merged_economic_indicators.csv")

# Convert 'date' column to Date type
data$date <- as.Date(data$date, format="%Y-%m-%d")


# View summary statistics
# summary(merged_data)
```

## Box plot

```{r}
#| label: Creating Box plot

plot_data <- merged_data |>
  mutate(
    HalfYear = ifelse(format(DATE, "%m") %in% c("01", "02", "03", "04", "05", "06"), 
                      paste0(format(DATE, "%Y"), "-H1"), 
                      paste0(format(DATE, "%Y"), "-H2")),  # Group by Half-Year
    Quarter = format(DATE, "%Y-Q%q"),  # Quarterly grouping
    UMCSENT = as.numeric(UMCSENT) 
  ) |>
  filter(!is.na(UMCSENT) & !is.na(`S&P500`)) |>
  filter(format(DATE, "%Y") >= "2020")

```

```{r}
# completed
# Calculate yearly means
mean_data <- plot_data |>
  group_by(Year = factor(format(DATE, "%Y"))) |>
  summarize(mean_UMCSENT = mean(UMCSENT, na.rm = TRUE))

# Rescale oil_prices to match the range of Consumer Sentiment (UMCSENT)
scale_factor <- max(plot_data$UMCSENT, na.rm = TRUE) / max(plot_data$oil_price, na.rm = TRUE)

# Boxplot with rescaled oil prices
box <- ggplot(plot_data, aes(x = factor(format(DATE, "%Y")), y = UMCSENT)) +
  geom_boxplot(fill = "thistle1", outlier.color = "red", outlier.size = 1.5) +
  geom_point(aes(
    y = oil_price * scale_factor, 
    text = paste("Scaled Oil Price:", sprintf("%.2f", oil_price * scale_factor))  # Update tooltip label and format
  ), color = "darkgreen", alpha = 0.6, size = 2, position = position_jitter(width = 0.2)) +
  geom_smooth(aes(y = oil_price * scale_factor, group = 1, 
                  text = paste("Smoothed Scaled Oil Price:", sprintf("%.2f", ..y..))), method = "loess", color = "darkgreen", linetype = "solid", size = 1, se = FALSE) +
  labs(
    title = "Consumer Sentiment and Oil Prices Trends Over Time",
    x = "Year",
    y = "Consumer Sentiment/Rescaled Oil Prices",
    caption = "Oil Prices are rescaled to align with Consumer Sentiment for easier comparison"
  ) +
  theme_minimal(base_size = 14)

# Convert to interactive plot
int_box <- ggplotly(box, tooltip = c("text"))  # Only show the custom tooltip

# Display the interactive plot
int_box


<<<<<<< HEAD
=======
# Rescale oil prices to match the range of Consumer Sentiment (UMCSENT)
scale_factor_oil <- max(plot_data$UMCSENT, na.rm = TRUE) / max(plot_data$oil_price, na.rm = TRUE)

int_box_2 <- ggplot(plot_data, aes(x = factor(format(DATE, "%Y")), y = UMCSENT)) +
  geom_boxplot(fill = "lightblue", outlier.color = "deeppink3", outlier.size = 1.5) +
  geom_smooth(aes(y = oil_price * scale_factor_oil, group = 1), method = "loess", color = "darkgreen", linetype = "dashed", size = 1, se = FALSE) +
  labs(
    title = "Consumer Sentiment and Oil Price Trends Over Time",
    x = "Year",
    y = "Consumer Sentiment (UMCSENT) / Rescaled Oil Prices",
    caption = "Oil Prices are rescaled to align with Consumer Sentiment for easier comparison"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    panel.border = element_rect(color = "black", fill = NA, size = 0.8),
    axis.text.x = element_text(angle = 45, hjust = 1))
>>>>>>> 420ec992a57d8e6b8cba25d3597db51c2940c959

int_box_2 <- ggplotly()
int_box_2


```

## Line plot

```{r}
options(warn = -1)


# Adding a range to mark the Russia-Ukraine war period
war_start <- as.Date("2022-02-01")
war_end <- as.Date("2023-12-31")

#Re-scaling the inflation index so that we have only 1 y-axis and its easier to compare
scale_factor <- max(plot_data$UMCSENT, na.rm = TRUE) / max(plot_data$MICH, na.rm = TRUE)

# Creating an animated line plot using ggplot and gganimate
animated_plot <- ggplot(plot_data, aes(x = DATE)) +
  geom_line(aes(y = UMCSENT, color = "Consumer Sentiment"), size = 1.2) +
  geom_line(aes(y = MICH * scale_factor, color = "Inflation"), size = 1.2) +
  annotate("rect", xmin = war_start, xmax = war_end, ymin = -Inf, ymax = Inf, fill = "gray80", alpha = 0.5) +
  # annotate("segment", x = as.Date("2023-02-24"), xend = as.Date("2023-02-24"), 
  #        y = 0, yend = 120, color = "black", linetype = "dashed", size = 1) +
  annotate("text", x = as.Date("2023-02-24"), y = 85, label = "Conflict Period", 
         color = "black", angle = 90, vjust = -0.5, hjust = 1, font = "bold") +
  scale_y_continuous(limits = c(0, 120),breaks = seq(0, 120, by = 20)) +
  scale_x_date(limits = c(as.Date("2015-01-01"), max(plot_data$DATE, na.rm = FALSE)),
               date_labels = "%Y",
               date_breaks = "1 year") +
  scale_color_manual(values = c("Consumer Sentiment" = "cyan1", "Inflation" = "mediumvioletred")) +
  labs(title = "Consumer Sentiment and Inflation Trends During Russia-Ukraine War",
       # subtitle = "Inflation index re-scaled to align with Consumer Sentiment for better comparison",
       x = "Date",
       y = "Consumer Sentiment & Inflation Index",
       color = "Economic Variables") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "bottom",
        plot.title = element_text(face = "bold", size = 13),
        plot.subtitle = element_text(size = 12, color = "gray50"),
        # panel.border = element_rect(color = "black", fill = NA, size = 0.8),
        # panel.grid.major = element_line(color = "gray80"),
        panel.grid.minor = element_blank(),
        plot.background = element_rect(fill = "white", color = NA)) +
  transition_reveal(DATE)  # Animate the plot over the 'DATE' variable

# Animate the plot
# animated_plot <- animate(animated_plot, nframes = 100, width = 800, height = 600)
animated_plot
# Save the animation
# anim_save("inflation_vs_sentiment.gif", animated_plot)
```

## Brief interpretation

1.  The trends suggest a strong inverse relationship between inflation and consumer sentiment during the conflict. As inflation surged, consumer confidence declined, highlighting the impact of rising costs on public perception.

2.  Consumer sentiment was already in a decline trend probably due to COVID caused by economic uncertainty and inflation pressures. Consumer sentiment drops more sharply during the conflict, reaching its lowest levels. This suggests that the war might have intensified concerns about economic stability, inflation, and geopolitical risks.

3.  Before the conflict there was gradual increase in inflation likely due to COVID-19 but we can see a sharp increase in it when the war started at full scale which is probably due to global supply chain disruptions

```{r}

# Define the conflict period
war_start <- as.Date("2022-02-01")  # Start of the conflict
war_end <- as.Date("2022-03-31")    # End of the conflict

# Scale factor for S&P500
scale_factor_500 <- max(plot_data$UMCSENT, na.rm = TRUE) / max(plot_data$`S&P500`, na.rm = TRUE)

# Create the animated plot
animated_plot <- ggplot(plot_data, aes(x = DATE)) +
  # Shaded region (war period)
  annotate("rect", xmin = war_start, xmax = war_end, ymin = -Inf, ymax = Inf, 
           fill = "gray80", alpha = 0.5) +
  
  # Static line for S&P500 (rescaled)
  geom_line(aes(y = `S&P500` * scale_factor_500, color = "Stock Market (S&P500)"), size = 1.2) +
  
  # Static line for Inflation (rescaled)
  geom_line(aes(y = MICH * scale_factor, color = "Inflation"), size = 1.2) +
  
  # Moving point for S&P500 along the line
  geom_point(aes(y = `S&P500` * scale_factor_500, color = "Stock Market (S&P500)"), size = 3) +
  
  # Moving point for Inflation along the line
  geom_point(aes(y = MICH * scale_factor, color = "Inflation"), size = 3) +
  
  # Annotation for the conflict period
  annotate("text", 
           x = as.Date("2022-03-10"), 
           y = 55, 
           label = "Period of Conflict", 
           color = "black", angle = 90, vjust = -0.5, hjust = 1, fontface = "italic") +
  
  # Adjust y-axis scale and breaks
  scale_y_continuous(limits = c(0, 150), breaks = seq(0, 150, by = 20)) +
  
  # Adjust x-axis scale
  scale_x_date(limits = c(as.Date("2021-01-01"), as.Date("2023-12-31")),
               date_labels = "%b %Y",  
               date_breaks = "5 months") +
  
  # Define custom colors for the lines and points
  scale_color_manual(values = c("Stock Market (S&P500)" = "cyan1", "Inflation" = "mediumvioletred")) +
  
  # Add titles and labels
  labs(
    title = "Stock Market (S&P500) and Inflation Trends During Russia-Ukraine War",
    subtitle = 'Date: {frame_along}',  # Dynamic subtitle for date
    x = "Date",
    y = "S&P500 & Inflation Index (Rescaled)",
    color = "Economic Variables"
  ) +
  
  # Apply theme for styling
  theme_minimal() +
  theme(
    panel.grid.minor = element_blank(),
    legend.title = element_text(size = 13),
    plot.title = element_text(size = 18),
    axis.title.x = element_text(size = 16),  
    axis.title.y = element_text(size = 16),  
    axis.text.x = element_text(size = 14),   
    axis.text.y = element_text(size = 14),   
    legend.text = element_text(size = 12)
  ) +
  
  # Transition to move the points along the lines
  transition_reveal(DATE)

# Save and render the animation
animate(animated_plot, nframes = 100, fps = 10, width = 800, height = 600, 
        renderer = av_renderer("moving_points_along_lines.mp4"))





```
