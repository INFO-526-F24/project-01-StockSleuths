---
title: "The Influence of Russia/Ukraine Conflict on US Economy"
subtitle: "INFO 526 - Fall 2024 - Project - Stock Sleuths"
author: 
  - name: "Stock Sleuths"
    affiliations:
      - name: "School of Information, University of Arizona"
description: "Project description"
format:
   html:
    code-tools: true
    code-overflow: wrap
    embed-resources: true
editor: visual
execute:
    warning: false
    echo: false
---

## Introduction

This analysis examines how the Russia-Ukraine conflict has impacted the U.S. economy by exploring key economic indicators, including the S&P 500 index, inflation rates, and consumer sentiment. We will clean, merge, and visualize these datasets to uncover trends and correlations.

## Data Sources

The datasets include:

1\. **S&P 500 Index Data**: Daily historical values for the S&P 500, a major U.S. stock market index, from 2014 to present.

2\. **Inflation Rate Data**: Monthly U.S. inflation rates, which reflect economic inflation trends since 1978.

3\. **Consumer Sentiment Data**: Monthly consumer sentiment data reflecting consumer confidence in the economy, from 1952 to present.

## Setup

```{r}
#| label: Setup
if (!require("pacman")) 
  install.packages("pacman")

# to load packages or install the packages
pacman::p_load(tidyverse,
               here,
               ggforce,
               knitr,
               dplyr,
               tidyr,
               fs,
               DT,
               skimr,
               janitor,
               readxl,
               scales, 
               plotly,
               gganimate,
               magick,
               gifski, 
               transformr, 
               av)

knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```

## Data Cleaning

### Data set 1: S&P 500 Index Data

The S&P 500 data set contains daily historical values for the S&P 500, a key stock market index that tracks the performance of 500 large U.S. companies.

### Load and Preview Raw Data

```{r}
# Load the S&P 500 data
sp500_data <- read_csv(here("data", "sp500_index.csv"))
glimpse(sp500_data)  # Preview raw data structure
datatable(sp500_data)
```

### Cleaning and Transforming Data

```{r}
# Clean and transform S&P 500 data
sp500_data <- sp500_data |>
  rename(date = Date, sp500_index = `S&P500`) |>
  mutate(date = as.Date(date, format = "%m-%d-%Y")) |>
  clean_names()

# Preview cleaned data
glimpse(sp500_data)
summary(sp500_data)
datatable(sp500_data)

```

**Insight:** After cleaning, we have a dataset with `date` and `sp500_index` columns, making it easy to track stock market performance over time. The date formatting and column renaming help standardize the dataset for further analysis.

## Data set 2: Inflation Rate Data

The inflation data set contains monthly U.S. inflation rates, which are essential for understanding changes in purchasing power and the cost of living.

### Load and Preview Raw Data

```{r}
# Load Inflation data
inflation_data <- read_csv(here("data", "MICH.csv"))
glimpse(inflation_data)  # Preview raw data structure
datatable(inflation_data)
```

### Cleaning and Transforming Data

```{r}
# Clean and transform inflation data
inflation_data <- inflation_data |>
  rename(date = DATE, inflation_rate = MICH) |>
  mutate(date = as.Date(date, format = "%m-%d-%Y")) |>
  clean_names()

# Preview cleaned data
glimpse(inflation_data)
datatable(inflation_data)
```

**Insight:** The cleaned inflation data provides a monthly view of inflation rates in the U.S., which we can later correlate with other indicators to see how inflation has responded to global events like the Russia-Ukraine conflict.

## Dataset 3: Consumer Sentiment Data

The consumer sentiment data set captures the confidence levels of U.S. consumers, reflecting their optimism or pessimism about economic conditions.

### Load and Preview Raw Data

```{r}
# Load Consumer Sentiment data
sentiment_data <- read_csv(here("data", "UMCSENT.csv"))
glimpse(sentiment_data)  # Preview raw data structure
datatable(sentiment_data)
```

### Cleaning and Transforming Data

```{r}
# Clean and transform consumer sentiment data
sentiment_data <- sentiment_data |>
  rename(date = DATE, consumer_sentiment = UMCSENT) |>
  mutate(date = as.Date(date, format = "%m-%d-%Y"),
         consumer_sentiment = na_if(consumer_sentiment, ".")) |>
  mutate(consumer_sentiment = as.numeric(consumer_sentiment)) |>
  clean_names()

# Preview cleaned data
glimpse(sentiment_data)
datatable(sentiment_data)
```

**Insight:** The consumer sentiment data now includes a clean, numeric `consumer_sentiment` column, allowing us to track consumer confidence over time. This indicator often correlates with spending and investment behavior, making it a valuable measure for economic analysis.

## Data set 4: Oil Price Data

Oil price data is a critical indicator of economic dynamics, especially during geopolitical conflicts. This section loads, cleans, and analyzes oil data from multiple sheets in the Excel file.

### Load and Inspect Oil Price Data

```{r}
# Define file path for the oil price data set
file_path <- here("data", "pswrgvwall.xls")

# List all sheet names
sheet_names <- excel_sheets(file_path)

# Exclude "Contents" sheet and merge the remaining data sheets
oil_data <- map_dfr(sheet_names[!sheet_names %in% "Contents"], 
                    ~ read_excel(file_path, sheet = .x, skip = 2))

# Inspect the structure of the merged data
names(oil_data)
```

### Cleaning and Transforming Data

```{r}
# Rename relevant columns and clean the data
oil_data <- map_dfr(sheet_names[!sheet_names %in% "Contents"], 
                    ~ read_excel(file_path, sheet = .x, skip = 2))

# Select relevant columns
oil_data <- oil_data |>
  select(
    date = `Date`, 
    oil_price = `Weekly U.S. Regular Conventional Retail Gasoline Prices  (Dollars per Gallon)`
  )

# Rename columns for simplicity
oil_data <- oil_data |>
  clean_names() |>
  mutate(
    date = as.Date(date, format = "%Y-%m-%d"),
    oil_price = as.numeric(oil_price)
  ) |>
  filter(!is.na(oil_price))  # Remove rows with missing oil prices

# Preview the cleaned oil data
# glimpse(oil_data)
datatable(oil_data)

# Save cleaned oil data
write_csv(oil_data, here("data", "cleaned_oil_data.csv"))
```

## Identifying Missing Values Across Data sets

To ensure data quality, we summarize missing values across all data cd sets. This helps identify any gaps before merging and analyzing the data.

```{r}
# Missing values summary for each dataset
missing_summary <- list(
  S_P500 = sp500_data |> 
    summarize(across(everything(),
                     ~ sum(is.na(.))
                     )
              ),
  Inflation = inflation_data |> 
    summarize(across(everything(), 
                     ~ sum(is.na(.))
                     )
              ),
  Consumer_Sentiment = sentiment_data |> 
    summarize(across(everything(),
                     ~ sum(is.na(.))
                     )
              )
  ) |> 
  bind_rows(.id = "dataset")

missing_summary
datatable(missing_summary)
```

**Insight:** By summarizing missing values, we can see if there are any gaps in the data. If significant gaps exist, we may need to address these before merging data sets to ensure our analysis remains accurate and representative.

## Merging the Data sets

Now that each data set is cleaned, we merge them by the `date` column to create a comprehensive data set for analysis.

```{r}
## Merging the Datasets
merged_data <- sentiment_data |>
  left_join(inflation_data, by = "date") |>
  left_join(sp500_data, by = "date")

# Display the column names and structure of the merged dataset
glimpse(merged_data)

datatable(merged_data)

# Display a complete summary of the merged dataset
summary(merged_data)

# Use skimr for an enhanced summary
skim(merged_data)

```

**Insight:** The merged data set combines the S&P 500 index, inflation rates, and consumer sentiment data, all aligned by date. This allows us to analyze the interplay between stock market trends, inflation, and consumer sentiment over time, providing a holistic view of economic dynamics.

### Saving the Merged Data

Save the merged data set as a CSV file in the `data` folder for future analysis.

```{r}
# Save the merged dataset to the `data` folder
write_csv(merged_data, here("data", "merged_economic_indicators.csv"))
```

## Exploratory Data Visualization

We visualize each indicator over time to observe trends and identify any interesting patterns or potential correlations.

### **Visualization of Oil Prices**

### Descriptive analysis for oil prices

```{r}
# Calculate basic statistics for oil prices
oil_stats <- oil_data |>
  summarize(
    mean_price = mean(oil_price, na.rm = TRUE),
    median_price = median(oil_price, na.rm = TRUE),
    sd_price = sd(oil_price, na.rm = TRUE),
    min_price = min(oil_price, na.rm = TRUE),
    max_price = max(oil_price, na.rm = TRUE)
  )

datatable(oil_stats)
```

### Data Visualization

#### Oil Prices vs S&P 500 Stock Analysis:

```{r}
#| label: Oil Prices vs S&P 500 Stock Analysis
oil <- read_csv(here("data","cleaned_oil_data.csv"))
oil$date <- as.Date(oil$date, format = "%Y-%m-%d")

sp500_index <- read_csv(here("data","sp500_index.csv"))
sp500_index$Date <- as.Date(sp500_index$Date, format = "%Y-%m-%d")

sp500_index <- sp500_index |>
  rename(date = Date)

oil_2022 <- subset(oil, format(date, "%Y") == "2022")
sp500_2022 <- subset(sp500_index, format(date, "%Y") == "2022")

merged_data <- merge(oil_2022, sp500_2022, by = "date")

plot_1 <- ggplot(data = merged_data, aes(x = oil_price, y = `S&P500`)) +
  geom_point(color = "black", size = 3) +
  geom_smooth(method = "lm", color = "red", se = FALSE) +
  labs(
    title = "Oil Prices vs S&P 500 Prices (2022)",
    x = "Oil Prices",
    y = "S&P 500 Prices"
  ) +
  scale_x_continuous(labels = dollar) +
  scale_y_continuous(labels = dollar) +
  theme_minimal()
# Saving the plot
# Saving the plot in high resolution
ggsave(
  filename = here("images", "oil_vs_stocks_scatterplot.png"),
  plot = plot_1,
  width = 10,          # Adjust width as per your need
  height = 8,          # Adjust height as per your need
  dpi = 300            # Set DPI to 300 for high-quality output
)
```

##### Observations:

The scatter plot shows the relationship between oil prices and S&P 500 prices for the year 2022. The trend line in the graph suggests a negative correlation, meaning that as oil prices increase, S&P 500 prices tend to decrease. However, the points on the graph are quite spread out, which means the relationship is not very strong or consistent. This could indicate that while oil prices might have some impact on the S&P 500, there are likely other factors at play, such as changes in the economy, interest rates, or global events. Overall, the graph shows that there might be a slight connection between oil prices and stock performance, but it’s not strong enough to say one directly causes the other.

#### Oil Prices and S&P500 Trends from 2021 to 2023.

```{r}
#| label: Oil Prices and S&P500 Trends from 2021 to 2023.
oil <- read_csv("data/cleaned_oil_data.csv")
sp500 <- read_csv("data/sp500_index.csv")

start_date <- as.Date("2021-01-01")
end_date <- as.Date("2023-01-01")

oil_filtered <- oil %>%
  filter(date >= start_date & date <= end_date)

sp500_filtered <- sp500 %>%
  filter(Date >= start_date & Date <= end_date)

oil_filtered <- oil_filtered %>%
  rename(Date = date)

sp500_filtered <- sp500_filtered %>%
  rename(SP500 = `S&P500`)

combined_data <- oil_filtered %>%
  inner_join(sp500_filtered, by = "Date") %>%
  select(Date, oil_price, SP500)

combined_data$Date <- as.Date(combined_data$Date, format = "%Y-%m-%d")
combined_data <- combined_data %>%
  filter(!is.na(Date) & !is.na(oil_price) & !is.na(SP500))

highlight_period <- data.frame(
  xmin = as.Date("2022-02-24"),
  xmax = as.Date("2022-03-31"),
  ymin = -Inf,  # Extends shading to bottom of the plot
  ymax = Inf    # Extends shading to top of the plot
)

# Rescale oil_price to match SP500 range
combined_data <- combined_data %>%
  mutate(oil_price_rescaled = oil_price * (max(SP500) / max(oil_price)))

animated_plot <- ggplot(combined_data, aes(x = Date)) +
  geom_rect(
    data = highlight_period,
    aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
    fill = "lightgray", alpha = 0.3, inherit.aes = FALSE) +
  geom_line(aes(y = oil_price_rescaled, color = "Oil Prices"), size = 1) +
  geom_line(aes(y = SP500, color = "S&P 500"), size = 1) +
  geom_point(aes(y = oil_price_rescaled, color = "Oil Prices"), size = 2, alpha = 0.7) +
  geom_point(aes(y = SP500, color = "S&P 500"), size = 2, alpha = 0.7) + 
  scale_color_manual(values = c("Oil Prices" = "red", "S&P 500" = "blue")) +
  labs(title = "Oil Prices and S&P 500 Trends from 2021 Until 2023",
       x = "Date", y = "Price", color = NULL ) +
  theme_minimal() +
  scale_x_date(date_labels = "%b %Y", 
               date_breaks = "5 months") + 
  transition_reveal(Date) +
  ease_aes('cubic-in-out') + 
  annotate("text", 
         x = as.Date("2022-03-10"), 
         y = min(combined_data$SP500, na.rm = TRUE) - 200, # Inside shaded area
         label = "Period of Conflict", 
         color = "black", size = 5, fontface = "italic", angle = 90) + 
  annotate("text",
  x = max(combined_data$Date) - 30,  
  y = min(combined_data$oil_price_rescaled),  
  label = "Oil Prices Rescaled for Comparison",
  color = "red",
  size = 2.5,
  hjust = 1) + 
  theme(
    plot.title = element_text(size = 8),
    axis.title.x = element_text(size = 8),  
    axis.title.y = element_text(size = 8),  
    axis.text.x = element_text(size = 8),   
    axis.text.y = element_text(size = 8),
    legend.position = "bottom",
    legend.text = element_text(size = 8)
  )

# animate(animated_plot, nframes = 300, fps = 20, width = 800, height = 600, renderer = av_renderer(videos/animated_time_series_q1.mp4"))
# Render and save the animation as a GIF
animate(animated_plot, renderer = gifski_renderer("images/stocks_vs_oil.gif"), height = 600, width = 800, units = "px", duration = 10, fps = 20)

```

#### Consumer Sentiment and Oil price trends over time

```{r}
#| label: Consumer Sentiment and Oil price trends over time

#Stock market
sp500_data <- read_csv('data/sp500_index.csv') 
sp500_data$Date <- as.Date(sp500_data$Date, format = "%Y-%m-%d")
sp500_data <- sp500_data |>
  rename(DATE = Date)
glimpse(sp500_data)

oil_data <- read_csv('data/cleaned_oil_data.csv')
oil_data <- oil_data |>
  rename(DATE = date) 
#str(oil_data)
glimpse(oil_data) 

# consumer sentiment
sent_data <- read_csv('data/UMCSENT.csv')  
sent_data$DATE <- as.Date(sent_data$DATE, format = "%Y-%m-%d")

# inflaltion
inflation_data <- read_csv('data/MICH.csv') 
inflation_data$DATE <- as.Date(inflation_data$DATE, format = "%Y-%m-%d")

# merged_data <- left_join(sent_data, inflation_data, by = 'DATE')
# glimpse(merged_data)

merged_data <- sp500_data |>
  left_join(inflation_data, by = 'DATE') |>
  left_join(oil_data, by = 'DATE') |>
  left_join(sent_data, by = 'DATE')
glimpse(merged_data)

merged_data <- merged_data |>
  mutate(UMCSENT = na_if(UMCSENT, "."))
merged_data <- merged_data |>
  filter(!is.na(UMCSENT) | !is.na(oil_price) | !is.na(`S&P500`))
glimpse(merged_data)

data <- read_csv("data/merged_economic_indicators.csv")

# Convert 'date' column to Date type
data$date <- as.Date(data$date, format="%Y-%m-%d")
```

```{r}
#| label: Creating Box plot

plot_data <- merged_data |>
  mutate(
    HalfYear = ifelse(format(DATE, "%m") %in% c("01", "02", "03", "04", "05", "06"), 
                      paste0(format(DATE, "%Y"), "-H1"), 
                      paste0(format(DATE, "%Y"), "-H2")),  # Group by Half-Year
    Quarter = format(DATE, "%Y-Q%q"),  # Quarterly grouping
    UMCSENT = as.numeric(UMCSENT) 
  ) |>
  filter(!is.na(UMCSENT) & !is.na(`S&P500`)) |>
  filter(format(DATE, "%Y") >= "2020")
```

```{r}
  # completed
# Calculate yearly means
mean_data <- plot_data |>
  group_by(Year = factor(format(DATE, "%Y"))) |>
  summarize(mean_UMCSENT = mean(UMCSENT, na.rm = TRUE))

# Rescale oil_prices to match the range of Consumer Sentiment (UMCSENT)
scale_factor <- max(plot_data$UMCSENT, na.rm = TRUE) / max(plot_data$oil_price, na.rm = TRUE)

# Boxplot with rescaled oil prices
box <- ggplot(plot_data, aes(x = factor(format(DATE, "%Y")), y = UMCSENT)) +
  geom_boxplot(fill = "thistle1", outlier.color = "red", outlier.size = 1.5) +
  geom_point(aes(
    y = oil_price * scale_factor, 
    text = paste("Scaled Oil Price:", sprintf("%.2f", oil_price * scale_factor))  # Update tooltip label and format
  ), color = "darkgreen", alpha = 0.6, size = 2, position = position_jitter(width = 0.2)) +
  geom_smooth(aes(y = oil_price * scale_factor, group = 1, 
                  text = paste("Smoothed Scaled Oil Price:", sprintf("%.2f", ..y..))), method = "loess", color = "darkgreen", linetype = "solid", size = 1, se = FALSE) +
  labs(
    title = "Consumer Sentiment and Oil Prices Trends Over Time",
    x = "Year",
    y = "Consumer Sentiment/Rescaled Oil Prices",
    caption = "Oil Prices are rescaled to align with Consumer Sentiment for easier comparison"
  ) +
  theme_minimal(base_size = 10)

# Convert to interactive plot
int_box <- ggplotly(box, tooltip = c("text"))  # Only show the custom tooltip

# Display the interactive plot
int_box




# Rescale oil prices to match the range of Consumer Sentiment (UMCSENT)
scale_factor_oil <- max(plot_data$UMCSENT, na.rm = TRUE) / max(plot_data$oil_price, na.rm = TRUE)

int_box_2 <- ggplot(plot_data, aes(x = factor(format(DATE, "%Y")), y = UMCSENT)) +
  geom_boxplot(fill = "lightblue", outlier.color = "deeppink3", outlier.size = 1.5) +
  geom_smooth(aes(y = oil_price * scale_factor_oil, group = 1), method = "loess", color = "darkgreen", linetype = "dashed", size = 1, se = FALSE) +
  labs(
    title = "Consumer Sentiment and Oil Price Trends Over Time",
    x = "Year",
    y = "Consumer Sentiment (UMCSENT) / Rescaled Oil Prices",
    caption = "Oil Prices are rescaled to align with Consumer Sentiment for easier comparison"
  ) +
  theme_minimal(base_size = 9) +
  theme(
    panel.border = element_rect(color = "black", fill = NA, size = 0.8),
    axis.text.x = element_text(angle = 45, hjust = 1))


int_box_2 <- ggplotly()
int_box_2
#ggsave(here("images", "sentiment_vs_oil_boxplot_0.png"), plot = int_box)
#ggsave(here("images", "sentiment_vs_oil_boxplot.png"), plot = int_box_2)
```

##### Brief interpretation

1.  The trends suggest a strong inverse relationship between inflation and consumer sentiment during the conflict. As inflation surged, consumer confidence declined, highlighting the impact of rising costs on public perception.

2.  Consumer sentiment was already in a decline trend probably due to COVID caused by economic uncertainty and inflation pressures. Consumer sentiment drops more sharply during the conflict, reaching its lowest levels. This suggests that the war might have intensified concerns about economic stability, inflation, and geopolitical risks.

3.  Before the conflict there was gradual increase in inflation likely due to COVID-19 but we can see a sharp increase in it when the war started at full scale which is probably due to global supply chain disruptions

#### Stocks and Inflation Trends During Russia Ukraine Conflict

```{r}
#| label: Stocks and Inflation Trends During Russia Ukraine Conflict
options(warn = FALSE)

# Adding a range to mark the Russia-Ukraine war period
war_start <- as.Date("2022-02-01")
war_end <- as.Date("2023-12-31")

#Re-scaling the inflation index so that we have only 1 y-axis and its easier to compare
scale_factor <- max(plot_data$UMCSENT, na.rm = TRUE) / max(plot_data$MICH, na.rm = TRUE)

# Creating an animated line plot using ggplot and gganimate
animated_plot <- ggplot(plot_data, aes(x = DATE)) +
  geom_line(aes(y = UMCSENT, color = "Consumer Sentiment"), size = 1.2) +
  geom_line(aes(y = MICH * scale_factor, color = "Inflation"), size = 1.2) +
  annotate("rect", xmin = war_start, xmax = war_end, ymin = -Inf, ymax = Inf, fill = "gray80", alpha = 0.5) +
  # annotate("segment", x = as.Date("2023-02-24"), xend = as.Date("2023-02-24"), 
  #        y = 0, yend = 120, color = "black", linetype = "dashed", size = 1) +
  annotate("text", x = as.Date("2023-02-24"), y = 85, label = "Conflict Period", 
         color = "black", angle = 90, vjust = -0.5, hjust = 1, font = "bold") +
  scale_y_continuous(limits = c(0, 120),breaks = seq(0, 120, by = 20)) +
  scale_x_date(limits = c(as.Date("2015-01-01"), max(plot_data$DATE, na.rm = FALSE)),
               date_labels = "%Y",
               date_breaks = "1 year") +
  scale_color_manual(values = c("Consumer Sentiment" = "cyan1", "Inflation" = "mediumvioletred")) +
  labs(title = "Consumer Sentiment and Inflation Trends During Russia-Ukraine War",
       # subtitle = "Inflation index re-scaled to align with Consumer Sentiment for better comparison",
       x = "Date",
       y = "Consumer Sentiment & Inflation Index",
       color = "Economic Variables") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "bottom",
        plot.title = element_text(face = "bold", size = 13),
        plot.subtitle = element_text(size = 12, color = "gray50"),
        # panel.border = element_rect(color = "black", fill = NA, size = 0.8),
        # panel.grid.major = element_line(color = "gray80"),
        panel.grid.minor = element_blank(),
        plot.background = element_rect(fill = "white", color = NA)) +
  transition_reveal(DATE)  # Animate the plot over the 'DATE' variable

# Animate the plot
# animated_plot <- animate(animated_plot, nframes = 100, width = 800, height = 600)
animated_plot
# Save the animation
anim_save("images/inflation_vs_sentiment.gif", animated_plot)
```

```{r}
options(warn = FALSE)

# Define the conflict period
war_start <- as.Date("2022-02-01")  # Start of the conflict
war_end <- as.Date("2022-03-31")    # End of the conflict

# Scale factor for MICH
scale_factor_mich <- max(plot_data$`S&P500`, na.rm = TRUE) / max(plot_data$MICH, na.rm = TRUE)


# Create the animated plot
animated_plot <- ggplot(plot_data, aes(x = DATE)) +
  # Shaded region (war period)
  annotate("rect", xmin = war_start, xmax = war_end, ymin = -Inf, ymax = Inf, 
           fill = "gray80", alpha = 0.5) +
  
  # Static line for S&P500
  geom_line(aes(y = `S&P500`, color = "Stock Market (S&P500)"), size = 1.2) +
  
  # Static line for Inflation (rescaled)
  geom_line(aes(y = MICH * scale_factor_mich, color = "Inflation"), size = 1.2) +
  
  # Moving point for S&P500 along the line
  geom_point(aes(y = `S&P500`, color = "Stock Market (S&P500)"), size = 3) +
  
  # Moving point for Inflation along the line
  geom_point(aes(y = MICH * scale_factor_mich, color = "Inflation"), size = 3) +
  
  # Annotation for the conflict period
  annotate("text", 
           x = as.Date("2022-03-10"), 
           y = 4000, 
           label = "Conflict Began", 
           color = "black", angle = 90, vjust = -0.5, hjust = 1, fontface = "italic") +
  
  # Adjust y-axis scale and breaks
  scale_y_continuous(limits = c(0, max(plot_data$`S&P500`, na.rm = TRUE) * 1.1), 
                     breaks = seq(0, max(plot_data$`S&P500`, na.rm = TRUE) * 1.1, by = 500)) +
  
  # Adjust x-axis scale
  scale_x_date(limits = c(as.Date("2021-01-01"), as.Date("2023-12-31")),
               date_labels = "%b %Y",  
               date_breaks = "5 months") +
  
  # Define custom colors for the lines and points
  scale_color_manual(values = c("Stock Market (S&P500)" = "cyan1", "Inflation" = "mediumvioletred")) +
  
  # Add titles and labels
  labs(
    title = "Stock Market (S&P500) and Inflation Trends During Russia-Ukraine War",
    # subtitle = 'Date: {frame_along}',  # Dynamic subtitle for date
    x = "Date",
    y = "Stock Market & Inflation Index (Rescaled)",
    color = "Economic Variables"
  ) +
  
  # Apply theme for styling
  theme_minimal() +
  theme(
    panel.grid.minor = element_blank(),
    legend.title = element_text(size = 8),
    plot.title = element_text(size = 8),
    axis.title.x = element_text(size = 8),  
    axis.title.y = element_text(size = 6),  
    axis.text.x = element_text(size = 8),   
    axis.text.y = element_text(size = 8), 
    legend.position = "bottom",
    legend.text = element_text(size = 8)
  ) +
  # Transition to move the points along the lines
  transition_reveal(DATE)

# Save and render the animation
# animate(animated_plot, nframes = 100, fps = 10, width = 800, height = 600, 
        #renderer = av_renderer("videos/moving_points_along_lines.gif"))

# Render and save the animation as a GIF
animate(animated_plot, renderer = gifski_renderer("images/stocks_vs_inflation.gif"), height = 600, width = 800, units = "px", duration = 10, fps = 20)




```
